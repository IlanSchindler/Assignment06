using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Group06_Assignment6 {
  public class Program {
    static void Main(string[] args) {
      Console.WriteLine("Hello World!");
      BufferReader.Buffer = new Queue<Item>();
      BufferReader.Running = true;
      BufferReader.BufferSize = 0;
      Task.Run(() => new Producer("P1").Produce());
      Task.Run(() => new Producer("P2").Produce());
      Task.Run(() => new Consumer("C1").Consume());
      Task.Run(() => new Consumer("C2").Consume());
      Task.Run(() => new Consumer("C3").Consume());

      BufferReader.BufferSize = 10;
      //Task t1 = new Producer().Produce();
      //Task t2 = new Producer().Produce();
      //Task t3 = new Consumer().Consume();
      //Task t4 = new Consumer().Consume();
      //Task t5 = new Consumer().Consume();
      //t1.Start();
      //t2.Start();
      //t3.Start();
      //t4.Start();
      //t5.Start();
      Thread.Sleep(1000);
      BufferReader.Running = false;
      Console.WriteLine("Done");
      
    }
  }
  public class Item {
    public int ItemId { get; set; }

    public static int RunningIds { get; set; }
    public static Item GetNewItem() {
      Console.WriteLine("Item " + RunningIds + " Created");
      return new Item() { ItemId = RunningIds++ };
    }
  }
  public class BufferReader {
    public static Queue<Item> Buffer { get; set; }
    public static bool Running { get; set; }

    public static int BufferSize { get; set; }
  }
  public class Producer : BufferReader {
    private DateTime created { get; set; }
    private string Name { get; set; }
    public Producer(string name) {
      created = DateTime.Now;
      Name = name;
    }
    public async Task Produce() {
      while (Running) {
        lock (Buffer) {
          if (Buffer.Count < BufferSize) {
            var newItem = Item.GetNewItem();
            Console.WriteLine($"{Name}: Item {newItem.ItemId} Enqueued");
            Buffer.Enqueue(newItem);
          }
        }
        Thread.Sleep(100);
      }
    }
  }

  public class Consumer : BufferReader {
    private string Name { get; set; }
    public Consumer(string name) {
      Name = name;
    }
    public async Task Consume() {
      while (Running) {
        lock (Buffer) {
          if (Buffer.Count > 0) {
            var item = Buffer.Dequeue();
            Console.WriteLine($"{Name}: Item {item.ItemId} Dequeued");
          }
        }
        Thread.Sleep(100);
      }
    }
  }
}
